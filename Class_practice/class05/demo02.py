# -*- coding: utf-8 -*-
"""
@Time ： 2021/11/16 20:35
@Auth ： Mr. William 1052949192
@Company ：特斯汀学院 @testingedu.com.cn
@Function ：函数的参数列表
"""


def func1(*args, **kwargs):
    """
    位置型参数一定要出现在键值对参数的前面
    这种写法可以接收到所有传参
    :param args: 位置参数（元组）
    :param kwargs: 键值对参数（字典）
    """
    # 所有位置型参数会接收为一个元组
    print(args)
    # 所有键值对参数会接收为一个字典
    print(kwargs)


# 位置型参数一定要出现在键值对参数的前面
func1(1, 2, 3, a=1, b=2, c=3)


# 位置型参数两种写法
def func2(p1, p2, *args):
    """
    所有有具体名字的参数必须出现在没有名字的参数前面
    所有有具体名字的参数必须要传，否则就会报错
    :param p1: 有具体名字的位置型参数（形参）
    :param p2: 有具体名字的位置型参数
    :param args: 没有具体名字的位置型参数（位置参数元组/列表）
    """
    print(p1, p2)
    print(args)


# 位置型参数，传递的时候，按位置一一对应
func2(1, 2, 3, 4, 5)

print("-------*params---------")
# *的作用：接收（写在参数定义）/传递（写在函数调用）不定长的位置参数
params = (3, 3, 3, 3, 3, 3, 34)
func2(*params)


def func3(x=11, y=22, **kwargs):
    """
    在语法上面，有具体键名的参数必须出现kwargs的前面
    所有带默认值参数都是可以不传的，不传就使用默认值，传递则使用传递值
    :param x: 有具体键名的带默认值参数
    :param y: 有具体键名的带默认值参数
    :param kwargs: 没有具体键名的带默认值参数
    """
    print(x, y)
    print(kwargs)


# 所有带默认值参数都是可以不传的，不传就使用默认值，传递则使用传递值
func3(x=44)
# 如果都是有具体键名的带默认值参数，也可以按位置传
func3(55, 66)
# 键值对参数传递时候不讲究顺序
func3(y=11, x=111, z=123)
# ** 的作用：接收（写在参数定义）/传递（写在函数调用）不定长的键值对参数
dd = {'a': 1, 'b': 2, 'x': 222}
func3(**dd)
